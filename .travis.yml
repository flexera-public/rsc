# Travis-CI for Golang projects
# Runs the tests, builds the distribution artifacts, uploads them to S3, and produces a
# code coverage report. The upload is segregated by branch name, so each branch gets its own
# uploaded version. (Note: nothing is automatically garbage collected.)
language: go
go:
  - 1.4
env:
  global:
    # RSBIN_KEY= to upload to rightscale-binaries bucket in q&b acct:
  - secure: "ijNb1OR2HyNxKXMPemlYit+QEyJDahpm0L5nTI4sevJ2+99+L/p/rBGOUfrCxnnAD3Swn9jzkqLjfwZiUqL5MRMzNHtTnCKgmVRZpH6xMeFpZlQqTGVpOeLr1jVbbXlopjro1dtPEFE1ytu0k0AQS2G/kljOwN4FB3pnDsPPKZ0="
    # GITHUB_TOKEN= to push code coverage comment to github
  - secure: "R0jYF8nVbEZ5lH/wb8rAfJ6SIpJOpjqmNgmac2kHF1RR+aUgXslYs45KP3OuOvTul8G4fPBrXaZ5Mrn1ipExDoy3MFtpgMJPfVR7qrazDQwGcUGeMde/mSrFczXGOKI9u6GRM+KaaOZ5nQAPowiC0KCMnCu0L3z8vWxejeopZK0="
    # COV_KEY= code coverage upload keys
  - secure: "TMMLVu0xRJb/33/2xexO6AJGlLjwidbp5uZxLwDWuQMTc/mTx/ia4peBCDkGkkFDD+8J93eCODZHzvB9cOFEEflnwpSs1uxetpG6Rmip+1mtuXWTd1dj6rHuTiK1HEaa/qEUsL6iXBuJfhgi9ZcVDplCMqkqcnBip+koX1asBXU="

# sudo=false makes the build run using a container
sudo: false

# I'm putting as many tasks as possible into the Makefile, hence the make depend...
install:
  - export PATH=$PATH:$HOME/gopath/bin # travis' worker doesn't seem to do this consistently
  - (cd $GOROOT/src && GOOS=darwin GOARCH=amd64 ./make.bash --no-clean)
  - (cd $GOROOT/src && GOOS=linux GOARCH=arm ./make.bash --no-clean)
    #- (cd $GOROOT/src && GOOS=windows GOARCH=amd64 ./make.bash --no-clean)
  - make depend

before_script: make build

# Everything else in here, we don't put the uploads into an after_success section because
# that can cause the build to succeed even if the artifacts are not actually uploaded
script:
  - export NAME=`basename $TRAVIS_BUILD_DIR`
  - make travis-test
  - export PATH=./Godeps/_workspace/bin:$PATH
  - ls Godeps/_workspace/bin
  - echo $PATH
  - which gof3r
  # Deploy build result to s3
  - export AWS_ACCESS_KEY_ID=AKIAIX3L4RHHIREAHABQ
  - export AWS_SECRET_ACCESS_KEY=${RSBIN_KEY}
  - make upload
  # Compute code coverage
  - go tool cover -func=$NAME.coverprofile > coverage.txt
  - export COVERAGE=$(grep "^total:" coverage.txt | grep -o "[0-9\.]*")
  - echo "Code Coverage is ${COVERAGE}%"
  - export BUILD=${TRAVIS_BUILD_NUMBER}
  - if [[ "${TRAVIS_PULL_REQUEST}" != "false" ]]; then let BUILD=BUILD-1; fi
  - export FILENAME="$(date +%Y-%m-%d)_${BUILD}_Coverage-${COVERAGE}.txt"
  - mv coverage.txt $FILENAME
  # Post code coverage comment to github
  - export CODCOV_URL="https://s3.amazonaws.com/rs-code-coverage/${NAME}/${FILENAME}"
  - export JSON_COMMENT="{\"body\":\"Code Coverage is ${COVERAGE}%, details at $CODCOV_URL
    (sometimes the URL can take a few minutes to be available)\"}"
  - |
    if [[ "${TRAVIS_PULL_REQUEST}" != "false" ]]; then
      curl -XPOST -s -H "Authorization: token ${GITHUB_TOKEN}" \
           -H "Content-Type: application/json" -d "${JSON_COMMENT}" \
           "https://api.github.com/repos/rightscale/${NAME}/issues/${TRAVIS_PULL_REQUEST}/comments"
    fi
  # Deploy code coverage result to S3
  - export AWS_ACCESS_KEY_ID=AKIAI4RIGBPD3NP2RQ3Q # code coverage bucket access
  - export AWS_SECRET_ACCESS_KEY=${COV_KEY}
  - gof3r put -b rs-code-coverage -k ${NAME}/${FILENAME} -m x-amz-acl:public-read < ${FILENAME}
  # Deploy code coverage badge to S3
  - export COVERAGE_INT=$(echo $COVERAGE | cut -d. -f1)
  - export BADGE_FILENAME=cc_badge_${TRAVIS_BRANCH}.svg
  - export BADGE_COLOR=$( if [ ${COVERAGE_INT} -gt 80 ] ; then echo brightgreen ; elif [ ${COVERAGE_INT} -gt 40 ] ; then echo yellow ; else echo red ; fi )
  - wget "http://img.shields.io/badge/coverage-${COVERAGE}%25-${BADGE_COLOR}.svg" -O ${BADGE_FILENAME}
  - gof3r put -b rs-code-coverage -k ${NAME}/${BADGE_FILENAME} -m x-amz-acl:public-read -m cache-control:no-cache -m content-type:image/svg+xml < ${BADGE_FILENAME}

notifications:
  slack:
          #secure: XOzXMfYmpv7xsycDWrjKkLVuZOOfPpYi8BQDVjHaSVzq233ClyqTktUAfLbPRu27E96+FyGueN7Yb6yYHqijYgycx7X7wcbYrE990xDcAzMXJxj3l3gSEzFgj8mRVqkQ9yB17JqZ9bnNRuoCMg4fjdIoI5GZlDkKOzdDJuGA/xs=
